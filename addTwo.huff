// function descriptions
// ==========================================================

#define function addTwo(uint256, uint256) view returns(uint256)

// Main Macro (Entrypoint of the smart contract)
// ===========================================================

#define macro MAIN() = takes(0) returns(0) {
  0x00 calldataload    // [number 1] // load first 32 bytes onto the stack - number 1
  0x20 calldataload    // [number 2] // load second 32 bytes onto the stack - number 2
  add                  // [number 1 + number 2] // add number 1 and 2 and store it in the stack

  0x00 mstore          // place [number 1 + number 2] in memory
  0x20 0x00 return     // return the result

  // Here in the memory when returning the values
  // we are taking two value with return because instruction is described as ->
  // <memeory size> <offset : from where to return> return

  // =========================================
  // EVM assembly description
  // =========================================
  //  BYTECODE          MNEMONIC         STACK                 ACTION
  //  60 00          // PUSH1 0x00       // [0x00]
  //  35             // CALLDATALOAD     // [number1]          Store the first 32 bytes on the stack
  //  60 20          // PUSH1 0x20       // [0x20, number1]
  //  35             // CALLDATALOAD     // [number2, number1] Store the second 32 bytes on the stack
  //  01             // ADD              // [number2+number1]  Take two stack inputs and add the result
  //  60 00          // PUSH1 0x00       // [0x0, (n2+n1)]
  //  52             // MSTORE           // []                 Store (n2+n1) in the first 32 bytes of memory
  //  60 20          // PUSH1 0x20       // [0x20]
  //  60 00          // PUSH1 0x00       // [0x00, 0x20]
  //  f3             // RETURN           // []                 Return the first 32 bytes of memory
}
